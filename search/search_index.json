{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"unleash-client-python Welcome to the Unleash Python client documentation! This folder contains documentation related to the project. Installation Check out the package on Pypi ! pip install UnleashClient Initialization from UnleashClient import UnleashClient client = UnleashClient(\"https://unleash.herokuapp.com/api\", \"My Program\") client.initialize_client() To clean up gracefully: client.destroy() Checking if a feature is enabled A check of a simple toggle: client.is_enabled(\"My Toggle\") Specifying a default value: client.is_enabled(\"My Toggle\", default_value=True) Supplying application context: app_context = {\"userId\": \"test@email.com\"} client.is_enabled(\"User ID Toggle\", app_context) Supplying a fallback function: def custom_fallback(feature_name: str, context: dict) -> bool: return True client.is_enabled(\"My Toggle\", fallback_function=custom_fallback) Must accept the fature name and context as an argument. Client will evaluate the fallback function once per call of is_enabled() . Please keep this in mind when creating your fallback function! If both a default_value and fallback_function are supplied, client will define the default value by OR ing the default value and the output of the fallback function. Logging Unleash Client uses the built-in logging facility to show information about errors, background jobs (feature-flag updates and metrics), et cetera. It's highly recommended that users implement To see what's going on when PoCing code, you can use the following: import logging import sys root = logging.getLogger() root.setLevel(logging.INFO) handler = logging.StreamHandler(sys.stdout) handler.setLevel(logging.DEBUG) formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') handler.setFormatter(formatter) root.addHandler(handler)","title":"Home"},{"location":"#unleash-client-python","text":"Welcome to the Unleash Python client documentation! This folder contains documentation related to the project.","title":"unleash-client-python"},{"location":"#installation","text":"Check out the package on Pypi ! pip install UnleashClient","title":"Installation"},{"location":"#initialization","text":"from UnleashClient import UnleashClient client = UnleashClient(\"https://unleash.herokuapp.com/api\", \"My Program\") client.initialize_client() To clean up gracefully: client.destroy()","title":"Initialization"},{"location":"#checking-if-a-feature-is-enabled","text":"A check of a simple toggle: client.is_enabled(\"My Toggle\") Specifying a default value: client.is_enabled(\"My Toggle\", default_value=True) Supplying application context: app_context = {\"userId\": \"test@email.com\"} client.is_enabled(\"User ID Toggle\", app_context) Supplying a fallback function: def custom_fallback(feature_name: str, context: dict) -> bool: return True client.is_enabled(\"My Toggle\", fallback_function=custom_fallback) Must accept the fature name and context as an argument. Client will evaluate the fallback function once per call of is_enabled() . Please keep this in mind when creating your fallback function! If both a default_value and fallback_function are supplied, client will define the default value by OR ing the default value and the output of the fallback function.","title":"Checking if a feature is enabled"},{"location":"#logging","text":"Unleash Client uses the built-in logging facility to show information about errors, background jobs (feature-flag updates and metrics), et cetera. It's highly recommended that users implement To see what's going on when PoCing code, you can use the following: import logging import sys root = logging.getLogger() root.setLevel(logging.INFO) handler = logging.StreamHandler(sys.stdout) handler.setLevel(logging.DEBUG) formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') handler.setFormatter(formatter) root.addHandler(handler)","title":"Logging"},{"location":"changelog/","text":"v3.2.0 General (Major) Allow users to supply a fallback function to customize the default value of a feature flag. v3.1.1 Bugfixes Custom constraints check should check for values in the properties sub-property in the context as specified by Unleash context documentation . v3.1.0 General (Minor) Add official-ish support for Python 3.8. v3.0.0 General (Major) Support constraints on all default strategies. This is a breaking change! To update your custom strategy, please checkout the custom strategy migration guide . (Major) Added flexibleRollout strategy. v2.6.0 General (Minor) Add ability to add request kwargs when initializing the client. These will be used when registering the client, fetching feature flags, and sending metrics. v2.5.0 General (Minor) Unleash client will not error if cache is not present and Unleash server not accessible during initialization. v2.4.0 General (Minor) Added static context values (app name, env) in preparation for Unleash v4 features. v2.3.0 General (Minor) Add option to disable metrics on client initialization. Bugfix (Minor) Fixed issue where disable_metrics arugment wasn't honored. v2.2.1 Bugfixes (Major) Date/time sent to Unleash (in register, metrics, etc) is correctly in UTC w/timestamp format. v2.2.0 Allow configuration of the cache directory. v2.1.0 General (Major) Support for Python 3.5, 3.6, and 3.7. (Credit to Baaym for 3.5 support!) v2.0.1 Bugfixes (Major) Fix issue where bucket.start value sent to Unleash was never updated. Credit to Calle for bug report/proposed solution! =) v2.0.0 Bugfixes (Major) Removed hard-coded /api/ in Unleash server URLs. Before upgrading, please adjust your server URL accordingly (i.e. changing http://unleash.heroku.com to http://unleash.heroku.com/api). v1.0.2 General unleash-client-python has moved under the general Unleash project! Bugfixes (Minor) Updated requests version to address security issue in dependency. v1.0.0 General Implemented custom strategies. v0.3.0 General Implemented client specification tests. Cache changed to use Instance ID as key. Bugfixes (Major) Fixed interposed arguments in normalized_hash() (aka MurmerHash3 wrapper). Python client will now do the same thing as the other clients! (Major) Fixed issues with logic in random strategies. v0.2.0 General Changed cache implementation. Instead of caching {feature toggle name: provisioning} we'll now cache the entire API response (and use it if the fetch fails in any way). v0.1.1 General Fixed Github link on pypi. Removed unused sphinx documentation. Added documentation using mkdocs v0.1.0 General First implementation of the Unleash Python client! Woo!","title":"Changelog"},{"location":"changelog/#v320","text":"General (Major) Allow users to supply a fallback function to customize the default value of a feature flag.","title":"v3.2.0"},{"location":"changelog/#v311","text":"Bugfixes Custom constraints check should check for values in the properties sub-property in the context as specified by Unleash context documentation .","title":"v3.1.1"},{"location":"changelog/#v310","text":"General (Minor) Add official-ish support for Python 3.8.","title":"v3.1.0"},{"location":"changelog/#v300","text":"General (Major) Support constraints on all default strategies. This is a breaking change! To update your custom strategy, please checkout the custom strategy migration guide . (Major) Added flexibleRollout strategy.","title":"v3.0.0"},{"location":"changelog/#v260","text":"General (Minor) Add ability to add request kwargs when initializing the client. These will be used when registering the client, fetching feature flags, and sending metrics.","title":"v2.6.0"},{"location":"changelog/#v250","text":"General (Minor) Unleash client will not error if cache is not present and Unleash server not accessible during initialization.","title":"v2.5.0"},{"location":"changelog/#v240","text":"General (Minor) Added static context values (app name, env) in preparation for Unleash v4 features.","title":"v2.4.0"},{"location":"changelog/#v230","text":"General (Minor) Add option to disable metrics on client initialization. Bugfix (Minor) Fixed issue where disable_metrics arugment wasn't honored.","title":"v2.3.0"},{"location":"changelog/#v221","text":"Bugfixes (Major) Date/time sent to Unleash (in register, metrics, etc) is correctly in UTC w/timestamp format.","title":"v2.2.1"},{"location":"changelog/#v220","text":"Allow configuration of the cache directory.","title":"v2.2.0"},{"location":"changelog/#v210","text":"General (Major) Support for Python 3.5, 3.6, and 3.7. (Credit to Baaym for 3.5 support!)","title":"v2.1.0"},{"location":"changelog/#v201","text":"Bugfixes (Major) Fix issue where bucket.start value sent to Unleash was never updated. Credit to Calle for bug report/proposed solution! =)","title":"v2.0.1"},{"location":"changelog/#v200","text":"Bugfixes (Major) Removed hard-coded /api/ in Unleash server URLs. Before upgrading, please adjust your server URL accordingly (i.e. changing http://unleash.heroku.com to http://unleash.heroku.com/api).","title":"v2.0.0"},{"location":"changelog/#v102","text":"General unleash-client-python has moved under the general Unleash project! Bugfixes (Minor) Updated requests version to address security issue in dependency.","title":"v1.0.2"},{"location":"changelog/#v100","text":"General Implemented custom strategies.","title":"v1.0.0"},{"location":"changelog/#v030","text":"General Implemented client specification tests. Cache changed to use Instance ID as key. Bugfixes (Major) Fixed interposed arguments in normalized_hash() (aka MurmerHash3 wrapper). Python client will now do the same thing as the other clients! (Major) Fixed issues with logic in random strategies.","title":"v0.3.0"},{"location":"changelog/#v020","text":"General Changed cache implementation. Instead of caching {feature toggle name: provisioning} we'll now cache the entire API response (and use it if the fetch fails in any way).","title":"v0.2.0"},{"location":"changelog/#v011","text":"General Fixed Github link on pypi. Removed unused sphinx documentation. Added documentation using mkdocs","title":"v0.1.1"},{"location":"changelog/#v010","text":"General First implementation of the Unleash Python client! Woo!","title":"v0.1.0"},{"location":"customstrategies/","text":"Implementing a custom strategy Set up a custom strategy in Unleash. Note down the name - you'll need this exact value to ensure we're loading the custom strategy correctly. Create a custom strategy object by sub-classing the StrategyV2 object. from UnleashClient.strategies.Strategies import StrategyV2 class CatTest(StrategyV2): def load_provisioning(self) -> list: return [x.strip() for x in self.parameters[\"sound\"].split(',')] def apply(self, context: dict = None) -> bool: \"\"\" Turn on if I'm a cat. :return: \"\"\" default_value = False if \"sound\" in context.keys(): default_value = context[\"sound\"] in self.parsed_provisioning return default_value Create a dictionary where the key is the name of the custom strategy. my_custom_strategies = {\"amIACat\": CatTest} When initializing UnleashClient, provide the custom strategy dictionary. unleash_client = UnleashClient(URL, APP_NAME, custom_strategies=my_custom_strategies) Fire up Unleash! You can now use the \"amIACat\" strategy in a feature toggle. Migrating your custom strategies from Strategy from v2.x.x to v3.x.x (for fun and profit) To get support for for constraints in your custom strategy, take the following steps: Instead of overriding the __call__() method, override the apply() method. (In practice, you can just rename the method!) ??? Profit!","title":"Custom Strategies"},{"location":"customstrategies/#implementing-a-custom-strategy","text":"Set up a custom strategy in Unleash. Note down the name - you'll need this exact value to ensure we're loading the custom strategy correctly. Create a custom strategy object by sub-classing the StrategyV2 object. from UnleashClient.strategies.Strategies import StrategyV2 class CatTest(StrategyV2): def load_provisioning(self) -> list: return [x.strip() for x in self.parameters[\"sound\"].split(',')] def apply(self, context: dict = None) -> bool: \"\"\" Turn on if I'm a cat. :return: \"\"\" default_value = False if \"sound\" in context.keys(): default_value = context[\"sound\"] in self.parsed_provisioning return default_value Create a dictionary where the key is the name of the custom strategy. my_custom_strategies = {\"amIACat\": CatTest} When initializing UnleashClient, provide the custom strategy dictionary. unleash_client = UnleashClient(URL, APP_NAME, custom_strategies=my_custom_strategies) Fire up Unleash! You can now use the \"amIACat\" strategy in a feature toggle.","title":"Implementing a custom strategy"},{"location":"customstrategies/#migrating-your-custom-strategies-from-strategy-from-v2xx-to-v3xx-for-fun-and-profit","text":"To get support for for constraints in your custom strategy, take the following steps: Instead of overriding the __call__() method, override the apply() method. (In practice, you can just rename the method!) ??? Profit!","title":"Migrating your custom strategies from Strategy from v2.x.x to v3.x.x (for fun and profit)"},{"location":"development/","text":"Contributions welcome! Here are some notes about common tools and tasks you'll run into when working on unleash-client-python . Tools miniconda - Used for local tox-ing to minimize friction when developing on a Mac. =) Setup Create a new conda environment ( conda create -n ucp python=3.7 ) or a venv. Install packages: pip install requirements-local.txt . If using Pycharm, add conda env as your project interpreter. Testing Activate your virtualenv solution (e.g. source activate ucp ). Run linting & tests: make test Run tox tests make tox-osx Dependency management Adding Add version-less package to requirement-*.txt file (in case we ever just wanna install everything) and versioned package to requirements.txt . Updating Use pur to update requirements.txt. If updating package requirements, update the setup.py file. mmh3 on OSX If having trouble installing mmh3 on OSX, try: CFLAGS=\"-mmacosx-version-min=10.13\" pip install mmh3 Release Land all your PRs. :) 1. Update changelog.md 2. mkdocs gh-deploy 3. bumpversion [major/minor/patch] 4. make build","title":"Development"},{"location":"development/#tools","text":"miniconda - Used for local tox-ing to minimize friction when developing on a Mac. =)","title":"Tools"},{"location":"development/#setup","text":"Create a new conda environment ( conda create -n ucp python=3.7 ) or a venv. Install packages: pip install requirements-local.txt . If using Pycharm, add conda env as your project interpreter.","title":"Setup"},{"location":"development/#testing","text":"Activate your virtualenv solution (e.g. source activate ucp ). Run linting & tests: make test Run tox tests make tox-osx","title":"Testing"},{"location":"development/#dependency-management","text":"Adding Add version-less package to requirement-*.txt file (in case we ever just wanna install everything) and versioned package to requirements.txt . Updating Use pur to update requirements.txt. If updating package requirements, update the setup.py file.","title":"Dependency management"},{"location":"development/#mmh3-on-osx","text":"If having trouble installing mmh3 on OSX, try: CFLAGS=\"-mmacosx-version-min=10.13\" pip install mmh3","title":"mmh3 on OSX"},{"location":"development/#release","text":"Land all your PRs. :) 1. Update changelog.md 2. mkdocs gh-deploy 3. bumpversion [major/minor/patch] 4. make build","title":"Release"},{"location":"resources/","text":"Unleash Unleash Server unleash-client-node unleash-docker","title":"Resources"},{"location":"resources/#unleash","text":"Unleash Server unleash-client-node unleash-docker","title":"Unleash"},{"location":"strategy/","text":"Strategy __init__(params) A generic strategy objects. Arguments Argument Description Required? Type Default Value params 'parameters' key from strategy section (...from feature section) of /api/clients/features response N, but you probably should have one. :) Dictionary {} load_provisioning() Method to load data on object initialization, if desired. This should parse the raw values in self.parameters into format Python can comprehend. The value returned by load_provisioning() will be stored in the self.parsed_provisioning class variable when object is created. The superclass returns an empty list since most of Unleash's default strategies are list-based (in one way or another). apply(context) Strategy implementation goes here. Arguments Argument Description Required? Type Default Value context Application Context N Dictionary {}","title":"Strategy"},{"location":"strategy/#strategy","text":"","title":"Strategy"},{"location":"strategy/#__init__params","text":"A generic strategy objects. Arguments Argument Description Required? Type Default Value params 'parameters' key from strategy section (...from feature section) of /api/clients/features response N, but you probably should have one. :) Dictionary {}","title":"__init__(params)"},{"location":"strategy/#load_provisioning","text":"Method to load data on object initialization, if desired. This should parse the raw values in self.parameters into format Python can comprehend. The value returned by load_provisioning() will be stored in the self.parsed_provisioning class variable when object is created. The superclass returns an empty list since most of Unleash's default strategies are list-based (in one way or another).","title":"load_provisioning()"},{"location":"strategy/#applycontext","text":"Strategy implementation goes here. Arguments Argument Description Required? Type Default Value context Application Context N Dictionary {}","title":"apply(context)"},{"location":"unleashclient/","text":"UnleashClient __init__() A client for the Unleash feature toggle system. UnleashClient.__init__(url, app_name, instance_id, refresh_interval, metrics_interval, disable_metrics, disable_registration, custom_headers) Arguments Argument Description Required? Type Default Value url Unleash server URL Y String N/A app_name Name of your program Y String N/A instance_id Unique ID for your program N String unleash-client-python refresh_interval How often the unleash client should check for configuration changes. N Integer 15 metrics_interval How often the unleash client should send metrics to server. N Integer 60 disable_metrics Disables sending metrics to Unleash server. N Boolean F disable_registration Disables registration with Unleash server. N Boolean F custom_headers Custom headers to send to Unleash. N Dictionary {} custom_options Custom arguments for requests package. N Dictionary {} custom_strategies Custom strategies you'd like UnleashClient to support. N Dictionary {} cache_directory Location of the cache directory. When unset, FCache will determine the location N Str Unset initialize_client() Initializes client and starts communication with central unleash server(s). This kicks off: * Client registration * Provisioning poll * Stats poll destroy() Gracefully shuts down the Unleash client by stopping jobs, stopping the scheduler, and deleting the cache. You shouldn't need this too much! is_enabled() Checks if a feature toggle is enabled. Notes: * If client hasn't been initialized yet or an error occurs, flat will default to false. UnleashClient.is_enabled(feature_name, context, default_value) Arguments Argument Description Required? Type Default Value feature_name Name of feature Y String N/A context Custom information for strategies N Dictionary {} default_value Default value of feature. N Boolean F Notes Using unleash-client-python with Gitlab Gitlab's feature flags only supports the features URL. (API calls to the registration URL and metrics URL will fail with HTTP Error code 401.) If using unleash-client-python with Gitlab's feature flages, we recommend initializing the client with disable_metrics = True and disable_registration = True. my_client = UnleashClient( url=\"https://gitlab.com/api/v4/feature_flags/someproject/someid\", app_name=\"myClient1\", instance_id=\"myinstanceid\", disable_metrics=True, disable_registration=True ) Overriding SSL certificate verification (Do this at your own risk!) If using an on-prem SSL certificate with a self-signed cert, you can pass custom arguments through to the request package using the custom_options argument. my_client = UnleashClient( url=\"https://myunleash.hamster.com\", app_name=\"myClient1\", instance_id=\"myinstanceid\", custom_options={\"verify\": False} )","title":"UnleashClient"},{"location":"unleashclient/#unleashclient","text":"","title":"UnleashClient"},{"location":"unleashclient/#__init__","text":"A client for the Unleash feature toggle system. UnleashClient.__init__(url, app_name, instance_id, refresh_interval, metrics_interval, disable_metrics, disable_registration, custom_headers) Arguments Argument Description Required? Type Default Value url Unleash server URL Y String N/A app_name Name of your program Y String N/A instance_id Unique ID for your program N String unleash-client-python refresh_interval How often the unleash client should check for configuration changes. N Integer 15 metrics_interval How often the unleash client should send metrics to server. N Integer 60 disable_metrics Disables sending metrics to Unleash server. N Boolean F disable_registration Disables registration with Unleash server. N Boolean F custom_headers Custom headers to send to Unleash. N Dictionary {} custom_options Custom arguments for requests package. N Dictionary {} custom_strategies Custom strategies you'd like UnleashClient to support. N Dictionary {} cache_directory Location of the cache directory. When unset, FCache will determine the location N Str Unset","title":"__init__()"},{"location":"unleashclient/#initialize_client","text":"Initializes client and starts communication with central unleash server(s). This kicks off: * Client registration * Provisioning poll * Stats poll","title":"initialize_client()"},{"location":"unleashclient/#destroy","text":"Gracefully shuts down the Unleash client by stopping jobs, stopping the scheduler, and deleting the cache. You shouldn't need this too much!","title":"destroy()"},{"location":"unleashclient/#is_enabled","text":"Checks if a feature toggle is enabled. Notes: * If client hasn't been initialized yet or an error occurs, flat will default to false. UnleashClient.is_enabled(feature_name, context, default_value) Arguments Argument Description Required? Type Default Value feature_name Name of feature Y String N/A context Custom information for strategies N Dictionary {} default_value Default value of feature. N Boolean F","title":"is_enabled()"},{"location":"unleashclient/#notes","text":"Using unleash-client-python with Gitlab Gitlab's feature flags only supports the features URL. (API calls to the registration URL and metrics URL will fail with HTTP Error code 401.) If using unleash-client-python with Gitlab's feature flages, we recommend initializing the client with disable_metrics = True and disable_registration = True. my_client = UnleashClient( url=\"https://gitlab.com/api/v4/feature_flags/someproject/someid\", app_name=\"myClient1\", instance_id=\"myinstanceid\", disable_metrics=True, disable_registration=True ) Overriding SSL certificate verification (Do this at your own risk!) If using an on-prem SSL certificate with a self-signed cert, you can pass custom arguments through to the request package using the custom_options argument. my_client = UnleashClient( url=\"https://myunleash.hamster.com\", app_name=\"myClient1\", instance_id=\"myinstanceid\", custom_options={\"verify\": False} )","title":"Notes"}]}